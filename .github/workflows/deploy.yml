name: Fullstack Deployment (Frontend & Backend) # 更新工作流名称

on:
  push:
    branches:
      - master # 确保这是你的主分支
  workflow_dispatch:

jobs:
  # ------ 前端部署作业 (已有的，略微调整) ------
  frontend-build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          # cache: 'pnpm' # 移除 cache: 'pnpm' 以避免与 setup-node 内部检查冲突

      - name: Install pnpm
        run: npm install -g pnpm

      - name: Verify pnpm installation
        run: pnpm --version

      - name: Install frontend dependencies with pnpm
        working-directory: ./frontend # 指向前端的 package.json 目录
        run: pnpm install --frozen-lockfile

      - name: Build frontend project with pnpm
        working-directory: ./frontend # 指向前端的 package.json 目录
        run: pnpm run build

      - name: List frontend build output directory # 验证前端构建结果
        run: ls -lah ./frontend/dist/

      - name: Deploy frontend to Server via SCP # 前端部署
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "frontend/dist/" # 前端构建输出路径
          target: "/var/www/html/order-manage/frontend_dist" # 服务器上前端代码的目标路径
          # 注意：为了避免混淆，最好给前端和后端分别设置不同的目标目录

  # ------ 后端部署作业 (新增) ------
  backend-build-and-deploy:
    needs: [frontend-build-and-deploy]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js for Backend
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          # cache: 'pnpm' # 移除 cache: 'pnpm'

      - name: Install pnpm for Backend
        run: npm install -g pnpm

      - name: Verify pnpm installation for Backend
        run: pnpm --version

      - name: Install backend dependencies with pnpm # 安装后端依赖
        working-directory: ./backend # 指向后端的 package.json 目录
        run: pnpm install --frozen-lockfile --prod # --prod 仅安装生产依赖

      # 移除或注释掉 'Build backend project (if needed)' 这一步
      # - name: Build backend project (if needed)
      #   working-directory: ./backend
      #   run: pnpm run build # 假设你的后端 package.json 有一个 build 脚本用于编译

      - name: Deploy backend to Server via SCP # 后端部署
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          # 后端通常只需要传输源代码和 node_modules
          source: "backend/" # 上传整个后端代码目录
          target: "/var/www/html/order-manage/backend_app" # 服务器上后端代码的目标路径

      - name: Run remote commands for Backend # 在服务器上执行后端相关命令
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd /var/www/html/order-manage/backend_app/backend # 进入后端部署目录

            # 重要的是：在服务器上重新安装生产依赖
            # 因为你上传的是源代码，而不是整个 node_modules 目录
            echo "Installing backend dependencies on server..."
            pnpm install --prod # 假设服务器上也安装了 pnpm，并且需要重新安装依赖
            pnpm prisma generate
            # pnpm prisma migrate deploy # 如需自动迁移数据库可取消注释
            # 如果你的后端应用是使用 pm2 管理的，请取消注释并调整
            pm2 status || npm install -g pm2 # 如果服务器上没有pm2，可以尝试安装
            pm2 list # 查看pm2管理的进程
            pm2 reload order-manage || pm2 start src/index.js --name order-manage # 根据你的后端入口文件和pm2配置调整

            # 如果是 systemd 服务：
            # sudo systemctl restart your_backend_service_name

            echo "Backend deployment completed and service restarted."


            echo "Backend deployment completed and service restarted."
